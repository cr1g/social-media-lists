version: '3'

services:
  postgres:
    image: "postgres:14-alpine"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - "pgdatabase:/var/lib/postgresql/data"

  api:
    build: ./api
    depends_on:
      - postgres
    environment:
      - ACCESS_TOKEN_TTL_MINUTES=${ACCESS_TOKEN_TTL_MINUTES}
      - CORS_ORIGIN_WHITELIST=${CORS_ORIGIN_WHITELIST}
      - ENABLE_DEBUG_TOOLBAR=${ENABLE_DEBUG_TOOLBAR}
      - ENVIRONMENT=${ENVIRONMENT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - REFRESH_TOKEN_TTL_MINUTES=${REFRESH_TOKEN_TTL_MINUTES}
      - SECRET_KEY=${SECRET_KEY}
      - API_PORT=${API_PORT}
    expose:
      - ${API_PORT}
    volumes:
      - ./api:/usr/src/app
      - media:/usr/src/app/media
      - static:/usr/src/app/static

  tests:
    build:
      context: .
      dockerfile: tests/Dockerfile
    environment:
      - CORS_ORIGIN_WHITELIST=${CORS_ORIGIN_WHITELIST}
      - ENVIRONMENT=dev
      - POSTGRES_DB=test
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - ./api:/usr/src/app/api

  nginx:
    build:
      context: nginx
      args:
        - REVERSE_PROXY_PORT=${REVERSE_PROXY_PORT}
        - API_HOST=${API_HOST}
        - API_PORT=${API_PORT}
    depends_on:
      - api
    ports:
      - "${REVERSE_PROXY_PORT}:${REVERSE_PROXY_PORT}"
    volumes:
      - media:/var/www/media
      - static:/var/www/static

volumes:
  media:
  pgdatabase:
  static:
